sudo: required

language: bash

services:
  - docker

env:
  # Commons
  #matrix build
  # Spark
  - DH_REPO="sarora/spark" IMG_TAG="latest" DF_PATH="./commons/spark/1.5.1"
  - DH_REPO="sarora/spark" IMG_TAG="1.5.1" DF_PATH="./commons/spark/1.5.1"

  # Datasets
  # Movielens
  - DH_REPO="sarora/movielens-dataset" IMG_TAG="latest" DF_PATH="./datasets/movielens-dataset"
  - DH_REPO="sarora/twitter-dataset-graph" IMG_TAG="latest" DF_PATH="./datasets/twitter-dataset-graph"

  # Becnhmark Images
  # Data Analytics
  - DH_REPO="sarora/analytics" IMG_TAG="base" DF_PATH="./benchmarks/data-analytics/base"
  - DH_REPO="sarora/data-analytics" IMG_TAG="master" DF_PATH="./benchmarks/data-analytics/master"
  - DH_REPO="sarora/data-analytics" IMG_TAG="slave" DF_PATH="./benchmarks/data-analytics/slave"

  # Data Caching
  - DH_REPO="sarora/data-caching" IMG_TAG="server" DF_PATH="./benchmarks/data-caching/server"
  - DH_REPO="sarora/data-caching" IMG_TAG="client" DF_PATH="./benchmarks/data-caching/client"

  # Data Serving
  - DH_REPO="sarora/data-serving" IMG_TAG="server" DF_PATH="./benchmarks/data-serving/server"
  - DH_REPO="sarora/data-serving" IMG_TAG="client" DF_PATH="./benchmarks/data-serving/client"

  # Graph Analytics
  - DH_REPO="sarora/graph-analytics" IMG_TAG="3.0" DF_PATH="./benchmarks/graph-analytics/3.0"
  - DH_REPO="sarora/graph-analytics" IMG_TAG="latest" DF_PATH="./benchmarks/graph-analytics/3.0"

  # In-memory Analytics
  - DH_REPO="sarora/in-memory-analytics" IMG_TAG="latest" DF_PATH="./benchmarks/in-memory-analytics/3.0"
  - DH_REPO="sarora/in-memory-analytics" IMG_TAG="3.0" DF_PATH="./benchmarks/in-memory-analytics/3.0"

  # Media Streaming
  - DH_REPO="sarora/media-streaming" IMG_TAG="client" DF_PATH="./benchmarks/media-streaming/client"
  - DH_REPO="sarora/media-streaming" IMG_TAG="server" DF_PATH="./benchmarks/media-streaming/server"
  - DH_REPO="sarora/media-streaming" IMG_TAG="dataset" DF_PATH="./benchmarks/media-streaming/dataset"

  # Web Search
  - DH_REPO="sarora/web-search" IMG_TAG="server" DF_PATH="./benchmarks/web-search/server"
  - DH_REPO="sarora/web-search" IMG_TAG="client" DF_PATH="./benchmarks/web-search/client"

  # Web Serving
  - DH_REPO="sarora/web-serving" IMG_TAG="db_server" DF_PATH="./benchmarks/web-serving/db_server"
  - DH_REPO="sarora/web-serving" IMG_TAG="faban_client" DF_PATH="./benchmarks/web-serving/faban_client"
  - DH_REPO="sarora/web-serving" IMG_TAG="web_server" DF_PATH="./benchmarks/web-serving/web_server"
  - DH_REPO="sarora/web-serving" IMG_TAG="memcached_server" DF_PATH="./benchmarks/web-serving/memcached_server"

before_script:
  - docker login -e="$DOCKER_EMAIL" -u="$DOCKER_USER" -p="$DOCKER_PASS"

script:
  # - docker build -t $DH_REPO:$IMG_TAG $DF_PATH
  # - docker push $DH_REPO;
  path=$(git --no-pager diff --name-only ${TRAVIS_BRANCH} $(git merge-base ${TRAVIS_BRANCH} master))
  paths=( $path )
  counter=0
  check1=”${DH_REPO#*/}”
  check2=$IMG_TAG

  while [[ ${paths[counter]} ]]; 
  do 
  	benchmark="${paths[counter]#*/}"; 
	tag="${benchmark#*/}"; 
	benchmark="${benchmark%%/*}"; 
	tag="${tag%%/*}"; 

	if [ “${check1}” -eq “${benchmark && “${check2}” -eq “${tag}” ]
	    then
		
		 travis_wait 40 docker build -t $DH_REPO:$IMG_TAG $DF_PATH
		
		 if [ “${TRAVIS_PULL_REQUEST}” -eq “false” && “${TRAVIS_BRANCH}” -eq “master” ]
		 
		   then
			travis_wait 40 docker push $DH_REPO
		fi
	fi
	let counter=counter+1; 
 done
